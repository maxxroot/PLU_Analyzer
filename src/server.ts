// src/server.ts - ROUTES MISES √Ä JOUR pour la recherche cadastrale
import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import helmet from 'helmet';
import { body, validationResult, query } from 'express-validator';
import { pluApiService } from './services/plu-api.service';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;
const isDevelopment = process.env.NODE_ENV === 'development';


// Middlewares de s√©curit√© (plus permissifs en d√©veloppement)
if (!isDevelopment) {
  app.use(helmet());
}

app.use(cors({
  origin: isDevelopment 
    ? ['http://localhost:5173', 'http://localhost:3000', 'http://127.0.0.1:5173']
    : process.env.FRONTEND_URL || 'http://localhost:3001',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Rate limiting (plus permissif en d√©veloppement)
const limiter = rateLimit({
  windowMs: isDevelopment ? 1 * 60 * 1000 : 15 * 60 * 1000, // 1 min en dev, 15 min en prod
  max: isDevelopment ? 1000 : 100, // 1000 en dev, 100 en prod
  message: 'Trop de requ√™tes depuis cette IP, r√©essayez plus tard.',
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => isDevelopment && req.ip === '127.0.0.1', // Skip rate limiting pour localhost en dev
});

app.use(limiter);
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Middleware de logging en d√©veloppement
if (isDevelopment) {
  app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
  });
}

// Middleware de gestion d'erreurs
interface ApiError extends Error {
  statusCode?: number;
}

const errorHandler = (err: ApiError, req: Request, res: Response, next: NextFunction) => {
  const statusCode = err.statusCode || 500;
  const message = err.message || 'Erreur interne du serveur';
  
  console.error(`Erreur ${statusCode}:`, err);
  
  res.status(statusCode).json({
    success: false,
    error: {
      message,
      ...(isDevelopment && { stack: err.stack, details: err })
    }
  });
};

// Middleware de validation
const validateRequest = (req: Request, res: Response, next: NextFunction) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      error: {
        message: 'Donn√©es invalides',
        type: 'VALIDATION_ERROR',
        details: errors.array(),
        suggestions: [
          'V√©rifiez le format des donn√©es envoy√©es',
          'Consultez la documentation des formats accept√©s : /api/cadastre/formats'
        ]
      }
    });
  }
  next();
};

/**
 * Middleware de gestion d'erreurs sp√©cifique cadastre
 */
const cadastreErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  if (req.path.includes('/cadastre') || req.path.includes('/analyze/cadastre')) {
    const statusCode = err.statusCode || 422;
    
    console.error(`Cadastre Error ${statusCode}:`, err);
    
    let errorType = 'CADASTRE_ERROR';
    let suggestions = [
      'V√©rifiez le format de la r√©f√©rence parcellaire (ex: AB123)',
      'V√©rifiez l\'orthographe du nom de commune',
      'V√©rifiez que le code postal correspond √† la commune',
      'Essayez avec une commune voisine si la parcelle est en limite'
    ];
    
    // Identifier le type d'erreur pour des conseils sp√©cifiques
    if (err.message?.includes('Format de parcelle')) {
      errorType = 'INVALID_PARCEL_FORMAT';
      suggestions = [
        'Utilisez le format AB1234, 0A1234 ou AB 1234',
        'Section: 1-3 caract√®res (lettres/chiffres), doit contenir au moins une lettre',
        'Num√©ro: 1-4 chiffres (ex: 1234, 42)',
        'Sections avec z√©ro accept√©es (0A, 0B, etc.)'
      ];
    } else if (err.message?.includes('Commune')) {
      errorType = 'COMMUNE_ERROR';
      suggestions = [
        'V√©rifiez l\'orthographe exacte de la commune',
        'Essayez sans accents ou avec des variantes (Saint/St)',
        'V√©rifiez que le code postal correspond bien √† cette commune'
      ];
    } else if (err.message?.includes('non trouv√©e')) {
      errorType = 'NOT_FOUND';
      suggestions = [
        'La parcelle n\'existe peut-√™tre pas dans cette commune',
        'V√©rifiez les donn√©es aupr√®s du service cadastre',
        'Essayez une recherche par adresse si disponible'
      ];
    }
    
    return res.status(statusCode).json({
      success: false,
      error: {
        message: err.message,
        type: errorType,
        suggestions,
        details: process.env.NODE_ENV === 'development' ? {
          path: req.path,
          method: req.method,
          body: req.body,
          query: req.query,
          stack: err.stack
        } : undefined
      },
      timestamp: new Date().toISOString()
    });
  }
  
  next(err);
};

// Routes

/**
 * POST /api/analyze/cadastre - Analyse par r√©f√©rence cadastrale (CORRIG√âE)
 */
app.post('/api/analyze/cadastre',
  [
    body('codePostal')
      .isLength({ min: 5, max: 5 })
      .isNumeric()
      .withMessage('Code postal fran√ßais invalide (5 chiffres)'),
    body('commune')
      .isString()
      .isLength({ min: 2, max: 100 })
      .withMessage('Nom de commune invalide'),
    body('numeroParcelle')
      .isString()
      .isLength({ min: 1, max: 20 })
      .withMessage('Num√©ro de parcelle invalide')
      .matches(/^[A-Z0-9]{1,3}[\s\-_]*\d{1,4}$/i)
      .withMessage('Format de parcelle invalide (ex: AB1234, 0A1234, AB 1234, AB-1234 - section 1-3 caract√®res + num√©ro 1-4 chiffres)')
      .custom((value) => {
        // V√©rifier qu'il y a au moins une lettre dans la section
        const clean = value.toUpperCase().replace(/[\s\-_]/g, '');
        const sectionMatch = clean.match(/^([A-Z0-9]{1,3})/);
        if (sectionMatch && !/[A-Z]/.test(sectionMatch[1])) {
          throw new Error('La section doit contenir au moins une lettre');
        }
        return true;
      })
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { codePostal, commune, numeroParcelle } = req.body;
      
      console.log(`üó∫Ô∏è Analyse cadastrale demand√©e:`);
      console.log(`   Parcelle: ${numeroParcelle}`);
      console.log(`   Commune: ${commune}`);
      console.log(`   Code postal: ${codePostal}`);
      
      const startTime = Date.now();
      
      // Utiliser la nouvelle m√©thode corrig√©e
      const result = await pluApiService.analyzeByCadastre(codePostal, commune, numeroParcelle);
      
      const duration = Date.now() - startTime;
      
      console.log(`‚úÖ Analyse cadastrale termin√©e en ${duration}ms`);
      
      res.json({
        success: true,
        data: result,
        metadata: {
          processingTime: duration,
          searchMethod: 'cadastre',
          parcelId: result.parcel.id,
          zone: result.zone.libelle
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Erreur analyse cadastrale:', error);
      next(error);
    }
  }
);

/**
 * GET /api/cadastre/validate - Validation d'une r√©f√©rence parcellaire
 */
app.get('/api/cadastre/validate',
  [
    query('codePostal')
      .isLength({ min: 5, max: 5 })
      .isNumeric()
      .withMessage('Code postal invalide'),
    query('commune')
      .isString()
      .isLength({ min: 2, max: 100 })
      .withMessage('Nom de commune invalide'),
    query('numeroParcelle')
      .isString()
      .isLength({ min: 1, max: 20 })
      .withMessage('Num√©ro de parcelle invalide')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { codePostal, commune, numeroParcelle } = req.query as { 
        codePostal: string; 
        commune: string; 
        numeroParcelle: string; 
      };
      
      console.log(`üîç Validation parcelle: ${numeroParcelle} √† ${commune} (${codePostal})`);
      
      const validation = await pluApiService.validateParcelReference(codePostal, commune, numeroParcelle);
      
      res.json({
        success: true,
        data: {
          isValid: validation.isValid,
          parcelle: validation.parcelle ? {
            id: validation.parcelle.id,
            commune: validation.parcelle.commune,
            section: validation.parcelle.section,
            numero: validation.parcelle.numero,
            contenance: validation.parcelle.contenance,
            coordinates: validation.parcelle.centroid
          } : null,
          errors: validation.errors || []
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Erreur validation cadastrale:', error);
      next(error);
    }
  }
);

/**
 * GET /api/cadastre/suggest/communes - Suggestions de communes
 */
app.get('/api/cadastre/suggest/communes',
  [
    query('q')
      .isString()
      .isLength({ min: 2, max: 100 })
      .withMessage('La recherche doit contenir au moins 2 caract√®res'),
    query('codePostal')
      .optional()
      .isLength({ min: 5, max: 5 })
      .isNumeric()
      .withMessage('Code postal invalide si fourni')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { q, codePostal } = req.query as { q: string; codePostal?: string };
      
      console.log(`üîç Suggestions communes pour: "${q}"${codePostal ? ` (${codePostal})` : ''}`);
      
      const suggestions = await pluApiService.suggestCommunes(q, codePostal);
      
      res.json({
        success: true,
        data: suggestions,
        count: suggestions.length,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Erreur suggestions communes:', error);
      // Ne pas faire √©chouer la requ√™te, retourner un tableau vide
      res.json({
        success: true,
        data: [],
        count: 0,
        error: 'Impossible de r√©cup√©rer les suggestions',
        timestamp: new Date().toISOString()
      });
    }
  }
);

/**
 * GET /api/cadastre/parcelle/info - Informations d√©taill√©es d'une parcelle
 */
app.get('/api/cadastre/parcelle/info',
  [
    query('codePostal').isLength({ min: 5, max: 5 }).isNumeric(),
    query('commune').isString().isLength({ min: 2, max: 100 }),
    query('numeroParcelle').isString().isLength({ min: 1, max: 20 })
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { codePostal, commune, numeroParcelle } = req.query as { 
        codePostal: string; 
        commune: string; 
        numeroParcelle: string; 
      };
      
      console.log(`‚ÑπÔ∏è Infos d√©taill√©es parcelle: ${numeroParcelle}`);
      
      // R√©utiliser la validation qui fait d√©j√† la recherche
      const validation = await pluApiService.validateParcelReference(codePostal, commune, numeroParcelle);
      
      if (!validation.isValid || !validation.parcelle) {
        return res.status(404).json({
          success: false,
          error: {
            message: 'Parcelle non trouv√©e',
            details: validation.errors
          }
        });
      }
      
      const parcelle = validation.parcelle;
      
      // Informations enrichies
      const detailedInfo = {
        identification: {
          id: parcelle.id,
          commune: parcelle.commune,
          section: parcelle.section,
          numero: parcelle.numero,
          prefixe: parcelle.prefixe,
          reference: `${parcelle.section}${parcelle.numero}`
        },
        geometrie: {
          contenance: parcelle.contenance,
          unite: 'm¬≤',
          centroid: {
            longitude: parcelle.centroid[0],
            latitude: parcelle.centroid[1]
          },
          geometry: parcelle.geometry
        },
        liens: {
          cadastreGouv: `https://www.cadastre.gouv.fr/scpc/rechparcel.do?file=${parcelle.id}`,
          geoportail: `https://www.geoportail.gouv.fr/carte?c=${parcelle.centroid[0]},${parcelle.centroid[1]}&z=18&l0=ORTHOIMAGERY.ORTHOPHOTOS::GEOPORTAIL:OGC:WMTS(1)&l1=CADASTRALPARCELS.PARCELLAIRE_EXPRESS::GEOPORTAIL:OGC:WMTS(0.6)&permalink=yes`
        }
      };
      
      res.json({
        success: true,
        data: detailedInfo,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Erreur infos parcelle:', error);
      next(error);
    }
  }
);

/**
 * GET /api/cadastre/test - Test de la recherche cadastrale avec exemples
 */
app.get('/api/cadastre/test',
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      console.log(`üß™ Test de la recherche cadastrale`);
      
      const testCases = [
        {
          name: 'Parcelle urbaine classique',
          params: { codePostal: '33000', commune: 'Bordeaux', numeroParcelle: 'AB1234' },
          description: 'Test avec une parcelle classique dans Bordeaux'
        },
        {
          name: 'Parcelle avec section commen√ßant par 0',
          params: { codePostal: '75001', commune: 'Paris', numeroParcelle: '0A4567' },
          description: 'Test avec section commen√ßant par z√©ro'
        },
        {
          name: 'Parcelle avec tiret',
          params: { codePostal: '69001', commune: 'Lyon', numeroParcelle: 'CD-7890' },
          description: 'Test avec tiret dans la r√©f√©rence'
        },
        {
          name: 'Parcelle avec num√©ro court',
          params: { codePostal: '13001', commune: 'Marseille', numeroParcelle: '0B42' },
          description: 'Test avec section 0B et num√©ro qui sera compl√©t√© (0042)'
        }
      ];
      
      const results = [];
      
      for (const testCase of testCases) {
        try {
          console.log(`üîç Test: ${testCase.name}`);
          
          const startTime = Date.now();
          const validation = await pluApiService.validateParcelReference(
            testCase.params.codePostal,
            testCase.params.commune,
            testCase.params.numeroParcelle
          );
          const duration = Date.now() - startTime;
          
          results.push({
            name: testCase.name,
            params: testCase.params,
            description: testCase.description,
            result: {
              success: validation.isValid,
              duration: `${duration}ms`,
              parcelle: validation.parcelle ? {
                id: validation.parcelle.id,
                coordinates: validation.parcelle.centroid
              } : null,
              errors: validation.errors
            }
          });
          
          console.log(`${validation.isValid ? '‚úÖ' : '‚ùå'} Test ${testCase.name}: ${duration}ms`);
          
        } catch (error) {
          results.push({
            name: testCase.name,
            params: testCase.params,
            description: testCase.description,
            result: {
              success: false,
              error: error instanceof Error ? error.message : 'Erreur inconnue'
            }
          });
          
          console.log(`‚ùå Test ${testCase.name} √©chou√©:`, error);
        }
      }
      
      res.json({
        success: true,
        data: {
          summary: {
            totalTests: results.length,
            successfulTests: results.filter(r => r.result.success).length,
            timestamp: new Date().toISOString()
          },
          results
        },
        message: 'Tests de recherche cadastrale termin√©s'
      });
      
    } catch (error) {
      console.error('‚ùå Erreur test cadastral:', error);
      next(error);
    }
  }
);

/**
 * GET /api/cadastre/formats - Documentation des formats accept√©s
 */
app.get('/api/cadastre/formats', (req: Request, res: Response) => {
  const documentation = {
    formats: {
      parcelle: {
        description: 'Formats de r√©f√©rence parcellaire accept√©s',
        examples: [
          'AB1234',
          '0A1234',
          'AB 1234',
          'AB-1234',
          'AB_1234',
          'ZE0042',
          '0B0001'
        ],
        rules: [
          '1 √† 3 caract√®res pour la section (lettres et/ou chiffres)',
          'La section doit contenir au moins une lettre',
          'Sections avec z√©ro accept√©es (0A, 0B, etc.)',
          'Suivi de 1 √† 4 chiffres pour le num√©ro (compl√©t√© automatiquement √† 4 chiffres)',
          'Espaces, tirets et underscores ignor√©s',
          'Casse ignor√©e (0a1234 = 0A1234)',
          'Num√©ros de 1 √† 9999 accept√©s'
        ]
      },
      commune: {
        description: 'Formats de nom de commune accept√©s',
        examples: [
          'Paris',
          'Saint-√âtienne',
          'Sainte-Marie-de-R√©',
          'Aix-en-Provence'
        ],
        rules: [
          'Nom complet de la commune',
          'Accents optionnels',
          'Tirets conserv√©s',
          'Casse ignor√©e'
        ]
      },
      codePostal: {
        description: 'Code postal fran√ßais',
        format: '5 chiffres exactement',
        examples: ['75001', '33000', '69001'],
        rules: [
          'Exactement 5 chiffres',
          'Pas d\'espaces ou de tirets',
          'Codes postaux fran√ßais uniquement'
        ]
      }
    },
    apis: {
      validation: {
        endpoint: '/api/cadastre/validate',
        method: 'GET',
        description: 'Valide une r√©f√©rence parcellaire sans faire l\'analyse compl√®te',
        parameters: ['codePostal', 'commune', 'numeroParcelle']
      },
      analyse: {
        endpoint: '/api/analyze/cadastre',
        method: 'POST',
        description: 'Analyse compl√®te PLU d\'une parcelle',
        body: {
          codePostal: 'string (5 chiffres)',
          commune: 'string',
          numeroParcelle: 'string'
        }
      },
      suggestions: {
        endpoint: '/api/cadastre/suggest/communes',
        method: 'GET',
        description: 'Suggestions de communes pour l\'autocompl√©tion',
        parameters: ['q (query)', 'codePostal (optionnel)']
      }
    },
    errors: {
      common: [
        {
          code: 'INVALID_POSTAL_CODE',
          message: 'Code postal invalide',
          solution: 'Utiliser 5 chiffres exactement'
        },
        {
          code: 'INVALID_PARCEL_FORMAT',
          message: 'Format de parcelle invalide',
          solution: 'Utiliser le format AB1234, 0A1234 ou AB 1234 (section + 4 chiffres)'
        },
        {
          code: 'COMMUNE_NOT_FOUND',
          message: 'Commune non trouv√©e',
          solution: 'V√©rifier l\'orthographe et le code postal'
        },
        {
          code: 'PARCEL_NOT_FOUND',
          message: 'Parcelle non trouv√©e',
          solution: 'V√©rifier la r√©f√©rence cadastrale'
        }
      ]
    }
  };
  
  res.json({
    success: true,
    data: documentation,
    version: '1.1.0',
    timestamp: new Date().toISOString()
  });
});

/**
 * GET /api/health - Health check
 */
app.get('/api/health', (req: Request, res: Response) => {
  res.json({
    success: true,
    message: 'API PLU op√©rationnelle',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

/**
 * POST /api/analyze/address - Analyse par adresse
 */
app.post('/api/analyze/address',
  [
    body('address')
      .isString()
      .isLength({ min: 5, max: 200 })
      .withMessage('L\'adresse doit contenir entre 5 et 200 caract√®res')
      .matches(/\d/)
      .withMessage('L\'adresse doit contenir au moins un num√©ro')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { address } = req.body;
      
      console.log(`üìç Analyse demand√©e pour l'adresse: ${address}`);
      
      const result = await pluApiService.analyzeByAddress(address);
      
      res.json({
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * POST /api/analyze/cadastre - Analyse par r√©f√©rence cadastrale
 */
app.post('/api/analyze/cadastre',
  [
    body('codePostal')
      .isLength({ min: 5, max: 5 })
      .isNumeric()
      .withMessage('Code postal fran√ßais invalide (5 chiffres)'),
    body('commune')
      .isString()
      .isLength({ min: 2, max: 100 })
      .withMessage('Nom de commune invalide'),
    body('numeroParcelle')
      .isString()
      .isLength({ min: 1, max: 20 })
      .withMessage('Num√©ro de parcelle invalide')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { codePostal, commune, numeroParcelle } = req.body;
      
      console.log(`üó∫Ô∏è Analyse demand√©e pour la parcelle: ${numeroParcelle}, ${commune} ${codePostal}`);
      
      const result = await pluApiService.analyzeByCadastre(codePostal, commune, numeroParcelle);
      
      res.json({
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * GET /api/validate/address - Validation d'adresse
 */
app.get('/api/validate/address',
  [
    query('q')
      .isString()
      .isLength({ min: 3, max: 200 })
      .withMessage('La recherche doit contenir entre 3 et 200 caract√®res')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { q } = req.query as { q: string };
      
      const addressData = await pluApiService.searchAddress(q);
      
      res.json({
        success: true,
        data: {
          address: addressData,
          isValid: addressData.score > 0.7,
          confidence: addressData.score
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * GET /api/search/suggest - Autocompl√©tion d'adresses
 */
app.get('/api/search/suggest',
  [
    query('q')
      .isString()
      .isLength({ min: 3, max: 100 })
      .withMessage('La recherche doit contenir entre 3 et 100 caract√®res')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { q } = req.query as { q: string };
      
      console.log(`üîç Suggestion demand√©e pour: ${q}`);
      
      // Utilisation de l'API fetch globale (disponible dans Node.js 18+)
      const response = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(q)}&limit=5`);
      
      if (!response.ok) {
        throw new Error(`Erreur API BAN: ${response.status}`);
      }
      
      const data = await response.json();
      
      const suggestions = data.features?.map((feature: any) => ({
        label: feature.properties.label,
        score: feature.properties.score,
        type: feature.properties.type,
        city: feature.properties.city,
        postcode: feature.properties.postcode
      })) || [];
      
      res.json({
        success: true,
        data: suggestions,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Erreur autocompl√©tion:', error);
      // En cas d'erreur, retourner un tableau vide plut√¥t qu'une erreur
      res.json({
        success: true,
        data: [],
        timestamp: new Date().toISOString()
      });
    }
  }
);

/**
 * GET /api/zones/types - Liste des types de zones PLU
 */
app.get('/api/zones/types', (req: Request, res: Response) => {
  const zoneTypes = [
    {
      code: 'U',
      name: 'Zone urbaine',
      description: 'Zones √©quip√©es o√π les constructions sont autoris√©es',
      subcategories: ['UA', 'UB', 'UC', 'UD', 'UE', 'UG', 'UH', 'UI', 'UL', 'UM', 'UP', 'UR', 'UT', 'UX', 'UZ']
    },
    {
      code: 'AU',
      name: 'Zone √† urbaniser',
      description: 'Zones destin√©es √† √™tre ouvertes √† l\'urbanisation',
      subcategories: ['1AU', '2AU']
    },
    {
      code: 'A',
      name: 'Zone agricole',
      description: 'Zones prot√©g√©es en raison de leur potentiel agronomique',
      subcategories: ['A', 'Ap', 'Ah']
    },
    {
      code: 'N',
      name: 'Zone naturelle',
      description: 'Zones prot√©g√©es en raison de leur int√©r√™t naturel',
      subcategories: ['N', 'Nb', 'Nc', 'Nd', 'Ne', 'Nf', 'Nh', 'Nj', 'Nl', 'Nr', 'Ns', 'Nt']
    }
  ];

  res.json({
    success: true,
    data: zoneTypes,
    timestamp: new Date().toISOString()
  });
});

/**
 * GET /api/test/address - Test de recherche d'adresse pour d√©bogage
 */
app.get('/api/test/address',
  [
    query('q')
      .isString()
      .isLength({ min: 3, max: 200 })
      .withMessage('La recherche doit contenir entre 3 et 200 caract√®res')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { q } = req.query as { q: string };
      
      console.log(`üß™ Test de recherche pour: "${q}"`);
      
      const results: any = {
        originalQuery: q,
        strategies: {}
      };
      
      // Test 1: Recherche exacte
      try {
        console.log('Test 1: Recherche exacte');
        const response1 = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(q)}&limit=5`);
        const data1 = await response1.json();
        
        results.strategies.exact = {
          success: true,
          resultsCount: data1.features?.length || 0,
          results: data1.features?.slice(0, 3).map((f: any) => ({
            label: f.properties.label,
            score: f.properties.score,
            type: f.properties.type
          })) || []
        };
        
        console.log(`‚úÖ Recherche exacte: ${data1.features?.length || 0} r√©sultats`);
      } catch (error) {
        results.strategies.exact = {
          success: false,
          error: error instanceof Error ? error.message : 'Erreur inconnue'
        };
        console.log(`‚ùå Erreur recherche exacte:`, error);
      }
      
      // Test 2: Recherche sans num√©ro
      try {
        const addressWithoutNumber = q.replace(/^\d+\s*/, '').trim();
        if (addressWithoutNumber !== q && addressWithoutNumber.length > 5) {
          console.log(`Test 2: Recherche sans num√©ro: "${addressWithoutNumber}"`);
          
          const response2 = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(addressWithoutNumber)}&limit=5`);
          const data2 = await response2.json();
          
          results.strategies.withoutNumber = {
            success: true,
            query: addressWithoutNumber,
            resultsCount: data2.features?.length || 0,
            results: data2.features?.slice(0, 3).map((f: any) => ({
              label: f.properties.label,
              score: f.properties.score,
              type: f.properties.type
            })) || []
          };
          
          console.log(`‚úÖ Recherche sans num√©ro: ${data2.features?.length || 0} r√©sultats`);
        }
      } catch (error) {
        results.strategies.withoutNumber = {
          success: false,
          error: error instanceof Error ? error.message : 'Erreur inconnue'
        };
        console.log(`‚ùå Erreur recherche sans num√©ro:`, error);
      }
      
      // Test 3: Recherche par ville
      try {
        const cityMatch = q.match(/\d{5}\s+([^,]+)/);
        if (cityMatch) {
          const cityName = cityMatch[1].trim();
          console.log(`Test 3: Recherche par ville: "${cityName}"`);
          
          const response3 = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(cityName)}&type=municipality&limit=1`);
          const data3 = await response3.json();
          
          results.strategies.city = {
            success: true,
            query: cityName,
            resultsCount: data3.features?.length || 0,
            results: data3.features?.map((f: any) => ({
              label: f.properties.label,
              score: f.properties.score,
              type: f.properties.type,
              coordinates: f.geometry.coordinates
            })) || []
          };
          
          console.log(`‚úÖ Recherche par ville: ${data3.features?.length || 0} r√©sultats`);
        }
      } catch (error) {
        results.strategies.city = {
          success: false,
          error: error instanceof Error ? error.message : 'Erreur inconnue'
        };
        console.log(`‚ùå Erreur recherche par ville:`, error);
      }
      
      // Test 4: Variantes de recherche
      try {
        console.log('Test 4: Variantes de recherche');
        const variants = [
          q.replace(/sainte-marie-de-r√©/i, 'sainte marie de re'),
          q.replace(/sainte-marie-de-r√©/i, 'ste marie de re'),
          q.replace(/rue du/i, 'rue'),
          q.replace(/li√®vre/i, 'lievre')
        ];
        
        results.strategies.variants = [];
        
        for (const variant of variants) {
          if (variant !== q) {
            try {
              const response4 = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(variant)}&limit=3`);
              const data4 = await response4.json();
              
              results.strategies.variants.push({
                query: variant,
                resultsCount: data4.features?.length || 0,
                bestResult: data4.features?.[0] ? {
                  label: data4.features[0].properties.label,
                  score: data4.features[0].properties.score
                } : null
              });
              
              console.log(`‚úÖ Variante "${variant}": ${data4.features?.length || 0} r√©sultats`);
            } catch (variantError) {
              console.log(`‚ùå Erreur variante "${variant}":`, variantError);
            }
          }
        }
      } catch (error) {
        results.strategies.variants = {
          success: false,
          error: error instanceof Error ? error.message : 'Erreur inconnue'
        };
      }
      
      res.json({
        success: true,
        data: results,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      console.error('‚ùå Erreur globale dans le test:', error);
      next(error);
    }
  }
);

/**
 * POST /api/analyze/address-enhanced - Analyse enrichie avec extraction PDF
 */
app.post('/api/analyze/address-enhanced',
  [
    body('address')
      .isString()
      .isLength({ min: 5, max: 200 })
      .withMessage('L\'adresse doit contenir entre 5 et 200 caract√®res')
      .matches(/\d/)
      .withMessage('L\'adresse doit contenir au moins un num√©ro'),
    body('extractFromPDF')
      .optional()
      .isBoolean()
      .withMessage('extractFromPDF doit √™tre un bool√©en'),
    body('useAI')
      .optional()
      .isBoolean()
      .withMessage('useAI doit √™tre un bool√©en'),
    body('forceRefresh')
      .optional()
      .isBoolean()
      .withMessage('forceRefresh doit √™tre un bool√©en')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { address, extractFromPDF = true, useAI = true, forceRefresh = false } = req.body;
      
      console.log(`üìç Analyse enrichie demand√©e pour: ${address}`);
      console.log(`   Options: PDF=${extractFromPDF}, IA=${useAI}, Refresh=${forceRefresh}`);
      
      const startTime = Date.now();
      
      const result = await pluApiService.analyzeByAddressWithPDFExtraction(address, {
        extractFromPDF,
        useAI,
        forceRefresh
      });
      
      const duration = Date.now() - startTime;
      
      res.json({
        success: true,
        data: result,
        metadata: {
          processingTime: duration,
          hasPDFExtraction: !!result.pdfAnalysis,
          pdfConfidence: result.pdfAnalysis?.confidence,
          extractionMethod: result.pdfAnalysis ? 
            (result.pdfAnalysis.confidence > 0.8 ? 'traditional' : 'ai') : 'none'
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * POST /api/plu/extract - Extraction PDF directe
 */
app.post('/api/plu/extract',
  [
    body('pdfUrl')
      .isURL({ protocols: ['http', 'https'], require_tld: false })
      .withMessage('URL PDF invalide'),
    body('zone')
      .isString()
      .isLength({ min: 1, max: 10 })
      .matches(/^[A-Z]{1,3}\d*[A-Z]*$/i)
      .withMessage('Code de zone PLU invalide (ex: UB, AU1, N)'),
    body('useAI')
      .optional()
      .isBoolean()
      .withMessage('useAI doit √™tre un bool√©en'),
    body('forceRefresh')
      .optional()
      .isBoolean()
      .withMessage('forceRefresh doit √™tre un bool√©en'),
    body('timeout')
      .optional()
      .isInt({ min: 5000, max: 300000 })
      .withMessage('timeout doit √™tre entre 5000 et 300000 ms')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { pdfUrl, zone, useAI = true, forceRefresh = false, timeout = 60000 } = req.body;
      
      console.log(`üìÑ Extraction PDF demand√©e:`);
      console.log(`   URL: ${pdfUrl}`);
      console.log(`   Zone: ${zone}`);
      console.log(`   Options: IA=${useAI}, Refresh=${forceRefresh}, Timeout=${timeout}ms`);
      
      const startTime = Date.now();
      
      const result = await pluApiService.extractPLUFromPDF(pdfUrl, zone, {
        useAI,
        forceRefresh,
        timeout
      });
      
      const duration = Date.now() - startTime;
      
      res.json({
        success: true,
        data: result,
        metadata: {
          processingTime: duration,
          confidence: result.confidence,
          extractionMethod: result.confidence > 0.8 ? 'traditional' : 'ai',
          rulesExtracted: [
            result.hauteurMaximale ? 'hauteur' : null,
            result.empriseAuSolMax ? 'emprise' : null,
            result.reculVoirie ? 'recul' : null,
            result.stationnementHabitation ? 'stationnement' : null,
            result.usagesAutorises.length > 0 ? 'usages' : null
          ].filter(Boolean),
          sourceArticles: result.sourceArticles
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * POST /api/plu/extract-all - Extraction de toutes les zones d'un PDF
 */
app.post('/api/plu/extract-all',
  [
    body('pdfUrl')
      .isURL({ protocols: ['http', 'https'], require_tld: false })
      .withMessage('URL PDF invalide'),
    body('useAI')
      .optional()
      .isBoolean()
      .withMessage('useAI doit √™tre un bool√©en'),
    body('forceRefresh')
      .optional()
      .isBoolean()
      .withMessage('forceRefresh doit √™tre un bool√©en')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { pdfUrl, useAI = true, forceRefresh = false } = req.body;
      
      console.log(`üìÑ Extraction compl√®te PDF demand√©e: ${pdfUrl}`);
      
      const startTime = Date.now();
      
      const results = await pluApiService.extractAllZonesFromPDF(pdfUrl, {
        useAI,
        forceRefresh
      });
      
      const duration = Date.now() - startTime;
      
      // Statistiques
      const stats = {
        totalZones: results.length,
        averageConfidence: results.reduce((sum, r) => sum + r.confidence, 0) / Math.max(results.length, 1),
        highConfidenceZones: results.filter(r => r.confidence > 0.8).length,
        extractionMethods: {
          traditional: results.filter(r => r.confidence > 0.8).length,
          ai: results.filter(r => r.confidence <= 0.8 && r.confidence > 0).length
        },
        totalRulesExtracted: results.reduce((sum, r) => {
          let count = 0;
          if (r.hauteurMaximale) count++;
          if (r.empriseAuSolMax) count++;
          if (r.reculVoirie) count++;
          if (r.stationnementHabitation) count++;
          count += r.usagesAutorises.length + r.usagesInterdits.length;
          return sum + count;
        }, 0)
      };
      
      res.json({
        success: true,
        data: results,
        metadata: {
          processingTime: duration,
          statistics: stats,
          zonesDetected: results.map(r => r.zone)
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * GET /api/plu/cache/status - Statut du cache
 */
app.get('/api/plu/cache/status',
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      // V√©rification Redis si disponible
      let cacheStatus = {
        enabled: false,
        connected: false,
        keys: 0,
        memoryUsage: 'N/A'
      };
      
      if (process.env.REDIS_URL) {
        try {
          // Simuler une v√©rification Redis (adapter selon votre implementation)
          cacheStatus = {
            enabled: true,
            connected: true,
            keys: 0, // Nombre de cl√©s en cache
            memoryUsage: '0 MB'
          };
        } catch (error) {
          console.warn('Cache Redis inaccessible:', error);
        }
      }
      
      res.json({
        success: true,
        data: {
          cache: cacheStatus,
          extractionMode: process.env.PDF_EXTRACTION_MODE || 'hybrid',
          aiAvailable: !!process.env.OLLAMA_URL,
          maxPdfSize: process.env.MAX_PDF_SIZE_MB || '50MB',
          timeout: process.env.EXTRACTION_TIMEOUT_MS || '60000ms'
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * DELETE /api/plu/cache/clear - Vider le cache
 */
app.delete('/api/plu/cache/clear',
  [
    query('pattern')
      .optional()
      .isString()
      .withMessage('Pattern doit √™tre une cha√Æne')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { pattern } = req.query as { pattern?: string };
      
      console.log(`üóëÔ∏è Demande de vidage du cache${pattern ? ` (pattern: ${pattern})` : ''}`);
      
      // Ici, implementer la logique de vidage du cache Redis
      // Exemple avec Redis:
      // if (redis) {
      //   if (pattern) {
      //     const keys = await redis.keys(`plu:*${pattern}*`);
      //     if (keys.length > 0) {
      //       await redis.del(...keys);
      //     }
      //   } else {
      //     await redis.flushdb(); // Vider toute la DB
      //   }
      // }
      
      res.json({
        success: true,
        message: pattern 
          ? `Cache vid√© pour le pattern: ${pattern}`
          : 'Cache compl√®tement vid√©',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * GET /api/plu/test/pdf - Test d'extraction avec PDF exemple
 */
app.get('/api/plu/test/pdf',
  [
    query('zone')
      .optional()
      .isString()
      .matches(/^[A-Z]{1,3}\d*[A-Z]*$/i)
      .withMessage('Code de zone PLU invalide'),
    query('useAI')
      .optional()
      .isBoolean()
      .withMessage('useAI doit √™tre un bool√©en')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { zone = 'UB', useAI = true } = req.query as { zone?: string; useAI?: boolean };
      
      console.log(`üß™ Test d'extraction PDF pour la zone: ${zone}`);
      
      // URL de test (√† adapter selon vos besoins)
      const testPdfUrl = 'https://www.example.com/test-plu.pdf';
      
      const startTime = Date.now();
      
      // Test avec texte simul√© pour la d√©monstration
      const mockResult = {
        zone,
        hauteurMaximale: 12,
        nombreEtagesMax: 2,
        empriseAuSolMax: 0.4,
        reculVoirie: 5,
        reculLimitesSeparatives: 3,
        stationnementHabitation: 1,
        usagesAutorises: ['habitation', 'bureaux'],
        usagesInterdits: ['industrie'],
        usagesConditionnes: [],
        materiaux: [],
        couleurs: [],
        toitures: [],
        ouvertures: [],
        plantationsObligatoires: [],
        essencesVegetales: [],
        espacesLibresMin: 30,
        confidence: useAI ? 0.75 : 0.85,
        sourceArticles: [`${zone}10`, `${zone}9`, `${zone}6`],
        lastUpdated: new Date().toISOString(),
        restrictions: [
          `Hauteur maximale : 12 m√®tres`,
          `Emprise au sol maximale : 40%`,
          `Recul minimum voirie : 5 m√®tres`
        ],
        rights: [
          'Construction d\'habitation autoris√©e',
          'Bureaux autoris√©s sous conditions',
          'Extensions possibles'
        ]
      };
      
      const duration = Date.now() - startTime;
      
      res.json({
        success: true,
        data: mockResult,
        metadata: {
          processingTime: duration,
          testMode: true,
          extractionMethod: useAI ? 'ai-simulation' : 'traditional-simulation',
          pdfUrl: testPdfUrl
        },
        message: 'R√©sultat de test - En production, ceci analyserait un vrai PDF PLU',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * GET /api/plu/patterns/test - Test des patterns regex
 */
app.get('/api/plu/patterns/test',
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      console.log(`üî¨ Test des patterns d'extraction PLU`);
      
      // Texte de test typique d'un r√®glement PLU
      const testText = `
        Article UB10 - Hauteur maximale des constructions
        
        La hauteur des constructions ne peut exc√©der 12 m√®tres au fa√Ætage.
        Le nombre d'√©tages est limit√© √† R+2.
        
        Article UB9 - Emprise au sol des constructions
        
        L'emprise au sol des constructions ne peut exc√©der 40% de la superficie du terrain.
        
        Article UB6 - Implantation par rapport aux voies
        
        Les constructions doivent observer un recul minimum de 5 m√®tres par rapport √† l'alignement.
        
        Article UB12 - Stationnement
        
        Il est exig√© 1 place de stationnement par logement.
        Pour les bureaux : 1 place pour 40 m¬≤ de surface de plancher.
        
        Article UB1 - Occupations interdites
        
        Sont interdites les activit√©s industrielles et les entrep√¥ts.
        
        Article UB2 - Occupations autoris√©es
        
        Sont autoris√©es les constructions √† usage d'habitation et de bureaux.
      `;
      
      // Simulation d'extraction avec patterns
      const extractedData = {
        hauteur: {
          values: [12],
          patterns: ['hauteur[^.]*?ne peut exc√©der (\\d+) m√®tres'],
          confidence: 0.9
        },
        etages: {
          values: [2],
          patterns: ['R\\+(\\d+)'],
          confidence: 0.95
        },
        emprise: {
          values: [40],
          patterns: ['emprise[^.]*?(\\d+)% de la superficie'],
          confidence: 0.9
        },
        recul: {
          values: [5],
          patterns: ['recul minimum de (\\d+) m√®tres'],
          confidence: 0.85
        },
        stationnement: {
          values: [1, 0.025], // 1 place/logement, 1 place/40m¬≤ = 0.025 place/m¬≤
          patterns: ['(\\d+) place[^.]*?logement', '1 place pour (\\d+) m¬≤'],
          confidence: 0.8
        },
        usagesInterdits: {
          values: ['activit√©s industrielles', 'entrep√¥ts'],
          patterns: ['Sont interdites ([^.]+)'],
          confidence: 0.75
        },
        usagesAutorises: {
          values: ['habitation', 'bureaux'],
          patterns: ['constructions √† usage ([^.]+)'],
          confidence: 0.8
        }
      };
      
      // Statistiques
      const stats = {
        totalPatternsApplied: Object.keys(extractedData).length,
        averageConfidence: Object.values(extractedData).reduce((sum, item) => sum + item.confidence, 0) / Object.keys(extractedData).length,
        highConfidenceExtractions: Object.values(extractedData).filter(item => item.confidence > 0.8).length,
        textLength: testText.length,
        extractionCoverage: '85%'
      };
      
      res.json({
        success: true,
        data: {
          testText: testText.substring(0, 500) + '...', // Aper√ßu
          extractedData,
          statistics: stats,
          recommendations: [
            stats.averageConfidence < 0.8 ? 'Am√©liorer les patterns pour augmenter la confiance' : 'Patterns fonctionnent correctement',
            'Ajouter plus de variations linguistiques pour les patterns',
            'Tester avec de vrais documents PLU pour valider'
          ]
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * MISE √Ä JOUR des routes existantes pour supporter l'extraction PDF optionnelle
 */

// Modifier la route analyze/address existante
app.post('/api/analyze/address',
  [
    body('address')
      .isString()
      .isLength({ min: 5, max: 200 })
      .withMessage('L\'adresse doit contenir entre 5 et 200 caract√®res')
      .matches(/\d/)
      .withMessage('L\'adresse doit contenir au moins un num√©ro'),
    body('withPDF')
      .optional()
      .isBoolean()
      .withMessage('withPDF doit √™tre un bool√©en')
  ],
  validateRequest,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { address, withPDF = false } = req.body;
      
      console.log(`üìç Analyse ${withPDF ? 'enrichie' : 'standard'} pour: ${address}`);
      
      const result = await pluApiService.analyzeByAddress(address, withPDF);
      
      res.json({
        success: true,
        data: result,
        metadata: {
          analysisType: withPDF ? 'enhanced' : 'standard',
          hasPDFExtraction: withPDF
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
);

/**
 * GET /api/plu/documentation - Documentation des patterns et formats
 */
app.get('/api/plu/documentation',
  async (req: Request, res: Response) => {
    const documentation = {
      patterns: {
        hauteur: {
          description: 'Extraction des hauteurs maximales en m√®tres',
          examples: [
            'hauteur maximale de 12 m√®tres',
            '15 m au fa√Ætage',
            'ne peut exc√©der 10 m√®tres'
          ],
          regex: [
            'hauteur[^.]*?(\\d+(?:[.,]\\d+)?)\\s*(?:m√®tres?|m\\b)',
            '(\\d+(?:[.,]\\d+)?)\\s*(?:m√®tres?|m\\b)[^.]*?fa√Ætage'
          ]
        },
        emprise: {
          description: 'Extraction de l\'emprise au sol en pourcentage',
          examples: [
            'emprise au sol ne peut exc√©der 40%',
            '35% de la superficie du terrain',
            'coefficient d\'emprise de 0,4'
          ],
          regex: [
            'emprise[^.]*?sol[^.]*?(\\d+(?:[.,]\\d+)?)\\s*%',
            'coefficient[^.]*?emprise[^.]*?(\\d+(?:[.,]\\d+)?)'
          ]
        },
        recul: {
          description: 'Extraction des distances de recul en m√®tres',
          examples: [
            'recul minimum de 5 m√®tres',
            'implantation √† 3 m√®tres minimum',
            'distance de 4 m de la voirie'
          ],
          regex: [
            'recul[^.]*?minimum[^.]*?(\\d+(?:[.,]\\d+)?)\\s*(?:m√®tres?|m\\b)',
            'distance[^.]*?(\\d+(?:[.,]\\d+)?)\\s*(?:m√®tres?|m\\b)[^.]*?voirie'
          ]
        }
      },
      apiFormats: {
        request: {
          extractFromPDF: {
            url: '/api/plu/extract',
            method: 'POST',
            body: {
              pdfUrl: 'https://example.com/plu.pdf',
              zone: 'UB',
              useAI: true,
              forceRefresh: false
            }
          },
          enhancedAnalysis: {
            url: '/api/analyze/address-enhanced',
            method: 'POST',
            body: {
              address: '123 Rue Example 33000 Bordeaux',
              extractFromPDF: true,
              useAI: true
            }
          }
        },
        response: {
          structure: {
            success: 'boolean',
            data: 'DetailedPLUAnalysis',
            metadata: {
              processingTime: 'number (ms)',
              confidence: 'number (0-1)',
              extractionMethod: 'traditional|ai|cache'
            }
          }
        }
      },
      zones: {
        types: {
          U: 'Zone urbaine √©quip√©e',
          AU: 'Zone √† urbaniser',
          A: 'Zone agricole',
          N: 'Zone naturelle et foresti√®re'
        },
        codes: [
          'UA', 'UB', 'UC', 'UD', 'UE', 'UG', 'UH', 'UI', 'UL', 'UM', 'UP', 'UR', 'UT', 'UX', 'UZ',
          '1AU', '2AU',
          'A', 'Ap', 'Ah',
          'N', 'Nb', 'Nc', 'Nd', 'Ne', 'Nf', 'Nh', 'Nj', 'Nl', 'Nr', 'Ns', 'Nt'
        ]
      },
      articles: {
        standard: {
          1: 'Occupations et utilisations du sol interdites',
          2: 'Occupations et utilisations du sol soumises √† conditions particuli√®res',
          6: 'Implantation des constructions par rapport aux voies et emprises publiques',
          7: 'Implantation des constructions par rapport aux limites s√©paratives',
          9: 'Emprise au sol des constructions',
          10: 'Hauteur maximale des constructions',
          12: 'Aires de stationnement',
          13: 'Espaces libres et plantations'
        }
      }
    };
    
    res.json({
      success: true,
      data: documentation,
      version: '1.1.0',
      timestamp: new Date().toISOString()
    });
  }
);

/**
 * Middleware de gestion d'erreurs sp√©cifique PDF
 */
const pdfErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  if (err.message?.includes('PDF') || err.message?.includes('Ollama')) {
    const statusCode = err.statusCode || 422;
    
    console.error(`PDF/IA Error ${statusCode}:`, err);
    
    return res.status(statusCode).json({
      success: false,
      error: {
        message: err.message,
        type: 'PDF_EXTRACTION_ERROR',
        suggestions: [
          'V√©rifiez que l\'URL du PDF est accessible',
          'Assurez-vous que le PDF contient du texte extractible',
          'V√©rifiez la connectivit√© avec le service Ollama si utilisant l\'IA',
          'R√©essayez avec forceRefresh=true pour ignorer le cache'
        ],
        ...(process.env.NODE_ENV === 'development' && { 
          stack: err.stack,
          details: err 
        })
      }
    });
  }
  
  next(err);
};

// Route catch-all pour les routes non trouv√©es
app.use('*', (req: Request, res: Response) => {
  res.status(404).json({
    success: false,
    error: {
      message: 'Route non trouv√©e',
      path: req.originalUrl,
      method: req.method
    }
  });
});

// Middleware de gestion d'erreurs (doit √™tre en dernier)
app.use(errorHandler);
app.use(pdfErrorHandler);
app.use(cadastreErrorHandler);


// D√©marrage du serveur
const server = app.listen(PORT, () => {
  console.log(`üöÄ Serveur API PLU d√©marr√© sur le port ${PORT}`);
  console.log(`üìã Health check: http://localhost:${PORT}/api/health`);
  console.log(`üåç Environnement: ${process.env.NODE_ENV || 'development'}`);
  
  if (isDevelopment) {
    console.log(`üîß Mode d√©veloppement activ√©`);
    console.log(`üåê CORS autoris√© pour: localhost:5173, localhost:3000`);
    console.log(`‚ö° Rate limiting: 1000 req/min (vs 100 en production)`);
  }
});



// Gestion gracieuse de l'arr√™t
process.on('SIGTERM', () => {
  console.log('üì¥ Arr√™t du serveur...');
  server.close(() => {
    console.log('‚úÖ Serveur arr√™t√© proprement');
    process.exit(0);
  });
});

export default app;